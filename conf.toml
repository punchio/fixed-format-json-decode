# 用于描述配置表相关数据类型，作为表格数据文件的导出依据以及服务器配置管理代码的生成依据
# import_list定义说明
# 已经在业务系统中定义好的基础类型的别名，在生成数据时，当作基础类型生成
# - name
#   别名名称，在配置中使用的类型，命名要求按大驼峰规范，不可与表名重名
# - type
#   对应的基础数据类型，生成配置数据时，以此类型解析
# - client
#   客户端类型名称，客户端代码生成时，会根据此名称，生成对应的客户端数据类型
# - server
#   服务器类型名称，服务器代码生成时，会根据此名称，生成对应的服务器数据类型
# type_list 定义说明
#   - name
#     类型名称，命名要求按大驼峰规范，不可重名
#   - comment
#     字段注释内容，代码生成时，会把注释加在定义后面。不要直接用注释的方式描述数据，因为代码生成时需要这个信息
#   - filter
#     过滤器，指定导出时是否需要进行裁剪，生成表格数据时，也会根据此过滤器来裁剪数据，不需要的表格数据文件或者字段就不生成
#         若不配置，则默认取值为sc
#         sc 表示服务器和客户端都需要该类型所关联的数据
#         s  表示服务器需要该类型所关联的数据
#         c  表示客户端需要该类型所关联的数据
#         -  表示不生成代码，只是为了帮助生成表格数据。有些配置结构可能在游戏代码中，或者protobuf中，这些数据结构需要定义一个帮助结构，不然无法正确生成代码和表格数据
#   - field_list
#     指定类型的数据字段，字段定义说明如下
#         - name  - 字段名称，命名要求按小写加下划线的命名规范
#         - type  - 字段类型，支持如下类型
#             (1) 基础数据类型，包括: bool int int32 int64 uint32 uint64 float datetime string
#             (2) 自定义数据类型，要求在本描述文件中有明确定义，不可循环引用
#             (3) 容器类型，支持array类型，支持容器嵌套
#             (4) 引入类型，如果类型为外部引入的类型，需要先在 import_list 中定义
#         filter    - 过滤器，若不配置，默认取值为sc
#         comment   - 字段注释内容，代码生成时，会把注释加在定义后面。不要直接用注释的方式描述数据，因为代码生成时需要这个信息

import_list = [
    { name = "ResourceGroup", type = "int32", client = "int", server = "pb.EResourceGroup" },
    { name = "Compare", type = "int32", client = "int", server = "pb.EResourceGroup" },
]

[[type_list]]
name = "ExampleNested" # 表名
comment = "嵌套类"
filter = "-"
# 没有设置filter，服务器客户端都会用到这张表
field_list = [ # 字段列表
    { name = "Id", type = "int32", comment = "任务线ID" },
    { name = "Import", type = "ResourceGroup", comment = "外部类型" },
    { name = "Int", type = "int64", comment = "任务线类型" },
    { name = "Str", type = "string", filter = "s", comment = "开启条件" }, # 只有服务器需要
    { name = "IntArray", type = "array<int>", comment = "奖励列表" },
]

[[type_list]]
name = "Example" # 表名
comment = "表类"
# 没有设置filter，服务器客户端都会用到这张表
field_list = [ # 字段列表
    { name = "Id", type = "int32", comment = "32位整数" },
    { name = "Int64", type = "int64", comment = "64整数" },
    { name = "Str", type = "string", filter = "s", comment = "字符串" }, # 只有服务器需要
    { name = "IntArray", type = "array<int>", comment = "整形属猪" },
    { name = "StrArray", type = "array<string>", comment = "字符数组" },
    { name = "Nested", type = "ExampleNested", comment = "嵌套类" },
    { name = "NestedArray", type = "array<ExampleNested>", comment = "嵌套类数组" },
]